#version 430

layout (local_size_x = 1, local_size_y = 1) in;

layout(binding = 0) uniform image2D uPerlinTexture;
layout(std430, binding = 1) buffer Permutations { int uP[]; };

uniform int   uWidth;
uniform int   uHeight;
uniform int   uResolution;

uniform int   uOctaves;
uniform float uScale;
uniform float uPersistance;

uniform int   uZ;
uniform int   uRepeat;

uniform float uBrightness;
uniform float uContrast;

vec4 saturate(vec4 color) {
    return max(vec4(0), min(color, vec4(1)));
}

float fade(float t) {
	return t * t * t * (t * (t * 6 - 15) + 10);
}

float grad(int hash, float x, float y, float z) {
	// 15 is 0b00001111 thus we take the first 4 bytes from the hash
	int h = hash & 15;
	
	// 8 is 0b000010000 so we check if the most significant bit is 0. if this is the case then choose x, else choose y
	float u = (h < 8) ? x : y;

	// 4 is 0b000001000 so we check if the two most significant bits are 0. if this is the case then choose y, if the
	// first two significant bits are 1 (in case of 12 0b1100 and 4 0b1110) use x, if the first two most significant
	// bits are unequal then use z
	//float v = (h < 4) ? y : (((h==12) || (h==14)) ? x : z);
    
	float v = (h < 4) ? y : z;
 	v = ((h==12) || (h==14)) ? x : v;

	// use the last bit to decide if u and v are positive or negative
	u = ((h&1) == 0) ? u : -u;
	v = ((h&2) == 0) ? v : -v;

	return u + v;
}

int p(int idx) {
	return uP[idx];
}

int inc(int val, int repeat) {
	return int(mod(val+1, repeat));
}

vec4 perlin(vec3 pos, float repeat) {
	// repeat
	float xr = mod(pos.x, repeat);
	float yr = mod(pos.y, repeat);
	float zr = mod(pos.z, repeat);

	// get lower byte of the integer positions to determine the unit cube we are in
	int X = int(trunc(xr)) & 255;
    int Y = int(trunc(yr)) & 255;
    int Z = int(trunc(zr)) & 255;

	// get relative position within the unit cube
	float xf = xr - trunc(xr);
    float yf = yr - trunc(yr);
    float zf = zr - trunc(zr);

	// linear interpolation looks unnatural, thus use a smooth fade transition instead
	float u = fade(xf);
    float v = fade(yf);
    float w = fade(zf);

	// determine the 8 gradient vector hashes for the 8 corner points of the current unit cube
	int r = int(repeat);
	int aaa = p(p(p(    X   )+    Y   )+    Z   );
    int aba = p(p(p(    X   )+inc(Y,r))+    Z   );
    int aab = p(p(p(    X   )+    Y   )+inc(Z,r));
    int abb = p(p(p(    X   )+inc(Y,r))+inc(Z,r));
    int baa = p(p(p(inc(X,r))+    Y   )+    Z   );
    int bba = p(p(p(inc(X,r))+inc(Y,r))+    Z   );
    int bab = p(p(p(inc(X,r))+    Y   )+inc(Z,r));
    int bbb = p(p(p(inc(X,r))+inc(Y,r))+inc(Z,r));

	// bilinear interpolation in the x-y plane for the two sets of four points
	float x1 = mix(grad(aaa, xf, yf  , zf  ), grad(baa, xf-1, yf  , zf  ), u);
	float x2 = mix(grad(aba, xf, yf-1, zf  ), grad(bba, xf-1, yf-1, zf  ), u);
	float y1 = mix(x1, x2, v);
	float x3 = mix(grad(aab, xf, yf  , zf-1), grad(bab, xf-1, yf  , zf-1), u);
	float x4 = mix(grad(abb, xf, yf-1, zf-1), grad(bbb, xf-1, yf-1, zf-1), u);
	float y2 = mix(x3, x4, v);

	// trilinear interpolation in z-direction for the resulting values of the bilinear interpolations
	float res = (mix(y1, y2, w) + 1) / 2.0; // map result to [0,1]

	return vec4(res, res, res, 1.0);
}

vec4 fbm(ivec2 pos) {
    float frequency = 1;
    float amplitude = 1;
    float maxValue  = 0;
	float repeat    = float(uWidth)/uResolution;

	// normalize position between 0 and 1 
	vec3 p3 = vec3(pos.x, pos.y, uZ);
	p3.x /= uResolution;
	p3.y /= uResolution;
	p3.z /= uResolution;
    
	// calculate the other octaves
	vec4 total = vec4(0);
    for(int i = 0; i < uOctaves; i++) {
        total += perlin(p3 * frequency, repeat * frequency) * amplitude;

		maxValue  += amplitude;
        amplitude *= uPersistance;
        frequency *= 2;
    }

	// normalize and clamp value
    total /= maxValue;
    total = saturate(total);

    return total;
}

vec4 applyBrightnessContrast(vec4 color) {
    color.rgb = ((color.rgb - 0.5f) * max(uContrast, 0)) + 0.5f;
    color.rgb += uBrightness;
    return color;
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    vec4 color = fbm(pos);
    color = applyBrightnessContrast(color);

    imageStore(uPerlinTexture, pos, color);
}


// vec4 dummy(vec3 pos, float repeat) {
// 	// repeat
// 	float xr = mod(pos.x, repeat);
// 	float yr = mod(pos.y, repeat);
// 	float zr = mod(pos.z, repeat);

// 	// get lower byte of the integer positions to determine the unit cube we are in
// 	int X = int(xr) & 255;
//     int Y = int(yr) & 255;
//     int Z = int(zr) & 255;

// 	//return vec4(float(X)/255.0, float(Y)/255.0, float(Z)/255.0, 1.0);

// 	return vec4(float(X)/255.0, float(Y)/255.0, float(Z)/255.0, 1.0);

// 	//return vec4(xr, yr, zr, 1.0);
// }

// void main() {
//     ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

// 	vec3 posf = vec3(pos.x, pos.y, uZ);
// 	// posf.x /= float(uResolution);
// 	// posf.y /= float(uResolution);
// 	// posf.z /= float(uResolution);

//     vec4 color = dummy(posf, 1024);
	
//     //color = applyBrightnessContrast(color);

//     imageStore(uPerlinTexture, pos, color);
// }